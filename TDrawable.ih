/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file TDrawable.ih
* @author Anis Benyoub (\c anis.benyoub@insa-lyon.fr )
* Liris CNRS
*
* @date 2012/06/26
*
* Implementation of methods defined in DrawableWithOgre.h
*
* This file is part of the DGtal library.
*/


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////
#include "TDrawable.h"
///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------
/**
* Constructor.
*/
template <typename T>
inline
DGtal::TDrawable<T>::TDrawable( const T & anObject) 
{
  myObject=&anObject;
  typeObject =anObject.className();
}
  
    
/**
 * Destructor.
 */
template <typename T>
inline
DGtal::TDrawable<T>::~TDrawable()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::TDrawable<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[XXX]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::TDrawable<T>::isValid() const
{
    return true;
}


/**
* Returns the object's class name
*/   
template <typename T>
inline
const string 
DGtal::TDrawable<T>::className() const
{
    return  (static_cast < const T *>(myObject)->className()); 
}


/**
* Returns the Dgtal object
*/  
template <typename T>
inline
const T *  DGtal::TDrawable<T>::getDgtalObject() 
{
    return myObject; 
}
///////////////////////////////>className()).c_str(); 
////////////////////////////////////////////////
// Implementation of inline functions //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, const DGtal::TDrawable<T> & object )
{
  object.selfDisplay( out );
  return out;
}

// //
///////////////////////////////////////////////////////////////////////////////

